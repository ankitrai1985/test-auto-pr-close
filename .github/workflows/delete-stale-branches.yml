name: Cleanup Stale Branches

on:
  workflow_dispatch: # Allows manual triggering

jobs:
  stale-branch-cleanup:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Checkout the repository
      - name: Checkout Repository
        uses: actions/checkout@v3

      # Step 2: Setup GitHub CLI
      - name: Setup GitHub CLI
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      # Step 3: Ensure the "housekeeping" label exists
      - name: Ensure Housekeeping Label Exists
        env:
          GITHUB_TOKEN: ${{ secrets.MY_PAT_TOKEN }}
        run: |
          # Check if the label exists
          label_exists=$(gh api repos/${{ github.repository }}/labels --jq '.[] | select(.name == "housekeeping-stale-branch")')
          if [ -z "$label_exists" ]; then
            echo "Creating 'housekeeping-stale-branch' label with red color."
            gh api repos/${{ github.repository }}/labels -f name="housekeeping-stale-branch" -f color="D4C5F9" -f description="Used for housekeeping PRs"
          else
            echo "'housekeeping-stale-branch' label already exists."
          fi

      # Step 4: Identify and process stale branches
      - name: Identify Stale Branches
        id: stale-branches
        env:
          GITHUB_TOKEN: ${{ secrets.MY_PAT_TOKEN }}
        run: |
          echo "Fetching branches..."
          # Fetch branches excluding main, develop, master, and check for inactivity
          # stale_branches=$(gh api repos/${{ github.repository }}/branches --jq '.[] | select(.name != "main" and .name != "develop" and .name != "master") | select(.commit.committer.date < now - (180*86400) ) | .name')
          stale_branches=$(gh api repos/${{ github.repository }}/branches --jq '.[] | select(.name != "main" and .name != "develop" and .name != "master") | select(.commit.committer.date < now ) | .name')
          if [ -z "$stale_branches" ]; then
            echo "No stale branches found."
            exit 0
          fi
          echo "Stale branches found: $stale_branches"
          echo "$stale_branches" > branches.txt # Write each branch name to a file

      # Step 5: Raise PR, Label, and Close Stale Branches
      - name: Raise PR, Label, and Close Stale Branches
        env:
          GITHUB_TOKEN: ${{ secrets.MY_PAT_TOKEN }}
        run: |
          # Read branches from file and process each branch
          while IFS= read -r branch; do
            echo "Processing branch: $branch"
            # Check if the branch has any open PRs
            open_prs=$(gh pr list --head "$branch" --json url --jq '.[].url')
            if [ -n "$open_prs" ]; then
              echo "Skipping branch $branch as it has open PRs: $open_prs"
              continue
            fi
            echo "No open PRs found for branch $branch. Proceeding."
            # Create a PR against the default branch (main or master)
            pr_url=$(gh pr create --head "$branch" --base "main" --title "Housekeeping: Cleanup $branch" --body "Preserving changes from stale branch $branch.")
            echo "PR created: $pr_url"
            # Add a "housekeeping-stale-branch" label to the PR
            pr_number=$(echo "$pr_url" | grep -o '[0-9]*$') # Extract PR number from URL
            gh pr edit "$pr_number" --add-label "housekeeping-stale-branch"
            echo "Added 'housekeeping-stale-branch' label to PR $pr_number."
            # Immediately close the PR
            gh pr close "$pr_url" --comment "Closing stale PR for branch $branch. The branch will now be deleted as part of the cleanup process."
            # Delete the stale branch
            gh api -X DELETE repos/${{ github.repository }}/git/refs/heads/$branch
            echo "Branch $branch deleted."
          done < branches.txt
